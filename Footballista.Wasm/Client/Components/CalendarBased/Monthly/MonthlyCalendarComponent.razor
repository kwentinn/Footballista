@using Itenso.TimePeriod;
@using Footballista.Wasm.Client.ClientServices;
@using Footballista.Wasm.Shared.Extensions;
@using Footballista.Wasm.Shared.Data.Calendars;

@inject CareerDateService careerDateService;

<div class="month">
	<ul>
		<li class="prev">
			<button class="btn" @onclick="() => DisplayPreviousMonth()">&#10094;</button>
		</li>
		<li class="btn" @onclick="() => DisplayInitialDate()">@careerDateService.GetDisplayMonth(DisplayDate)<br>@careerDateService.GetDisplayYear(DisplayDate)</li>
		<li class="btn next" @onclick="() => DisplayNextMonth()">&#10095;</li>
	</ul>
</div>

<ul class="weekdays">
	@foreach (var dow in careerDateService.DaysOfWeekEnumerable)
	{
		<li>@careerDateService.GetDisplayDayOfWeek(dow)</li>
	}
</ul>

<ul class="days">
	@foreach (Date date in careerDateService.GetDatesForMonthlyCalendar(DisplayDate))
	{
		<li>
			<span class="@GetDateClasses(date)">@date.Day</span>
			@if (HasEventsForDate(date))
			{
				@foreach (Event evt in GetEventsForDate(date))
				{
					<span class="event">@evt.Name</span>
				}
			}
		</li>
	}
</ul>

@code {
	private Date? _initialDate;
	public Date? InitialDate => _initialDate;

	private Date _displayDate;
	[Parameter]
	public Date DisplayDate
	{
		get => _displayDate;
		set
		{
			if (!_initialDate.HasValue)
			{
				_initialDate = value;
			}

			_displayDate = value;
		}
	}

	[Parameter]
	public List<Event> Events { get; set; }

	bool HasEventsForDate(Date date) => Events.Any(e => e.Date == date);
	List<Event> GetEventsForDate(Date date)
		=> Events.Where(e => e.Date == date).ToList();

	public void DisplayPreviousMonth()
	{
		DisplayDate = DisplayDate.AddMonths(-1);
	}
	public void DisplayNextMonth()
	{
		DisplayDate = DisplayDate.AddMonths(1);
	}
	public void DisplayInitialDate()
	{
		DisplayDate = _initialDate.Value;
	}

	public string GetDateClasses(Date date)
	{
		if (date.Month != DisplayDate.Month)
		{
			return "inactive";
		}
		if (date == InitialDate)
		{
			return "active";
		}
		return "";
	}
}
